// grid

@mixin susy-container {
  @include container($content-width-elrg);

  // padding-left: 6%;
  // padding-right: 6%;

  // @include breakpoint($max-width) {
  //   padding-left: 50px;
  //   padding-right: 50px;
  // }
  @include breakpoint($lrg) {
    @include container($content-width-lrg);
    // padding-left: 60px;
    // padding-right: 60px;
  }

    @include breakpoint($med) {
      @include container($content-width-med);
  }

  @include breakpoint($sml) {
    @include container($content-width-sml);
    padding-left: 30px;
    padding-right: 30px;
  }
}


@mixin blur($value: light) {
  @if $value == dark {
    backdrop-filter: blur(30px) saturate(100%);
    background-color: rgba(0, 0, 0, 0.2);
    color: rgba($white, .9);
  } @else if $value == ui {
    backdrop-filter: blur(20px) brightness(80%) contrast(80%);
    background-color: rgba(255, 255, 255, 0.7);
    color: rgba($black, .65);
  } @else {
    backdrop-filter: blur(30px) saturate(150%);
    background-color: rgba(255, 255, 255, 0.5);
    color: rgba($black, .85);
  }
}

// presentational

// Placeholders
@mixin placeholder {
  @each $placeholder
    in "::-webkit-input-placeholder",
    ":-moz-placeholder",
    "::-moz-placeholder",
    ":-ms-input-placeholder" {

    &#{$placeholder} {
      @content;
    }
  }
}


@mixin lego-mode() {
  @if ($legoMode == true) {
    @content;
  }
}

@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-kerning: auto;
  }
  @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
    font-kerning: auto;
  }
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .basic-content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin fixed-center($offset) {
  position: fixed;
  width: auto;
  left: $offset;
  right: $offset;
}

@mixin clearfix {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

@mixin underline($color: $link-underline-color, $weight: $link-underline-width, $offset: $link-underline-offset) {
  background-image: linear-gradient(bottom, transparent, transparent $offset, $color $offset, $color $offset + $weight, transparent $offset + $weight);
}



@mixin retina-bg ($url, $file-type, $width: auto, $repeat: no-repeat, $ratio: 1.5, $suffix: "@2x") {

  background: url($url + '.' + $file-type);
  background-repeat: $repeat;


  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (min--moz-device-pixel-ratio: $ratio),
    only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
    only screen and (min-resolution: #{round($ratio*96)}dpi),
    only screen and (min-resolution: #{$ratio}dppx) {

    background: url($url + $suffix + '.' + $file-type);
    background-size: $width auto;
    background-repeat: no-repeat;
    background-position: center;
  }
}


// utilities

@mixin debug-colors( $color: transparent ) {
  @if $devmode {
    background-color: $color;
  }
}

